{"version":3,"sources":["images/loading.gif","components/Display.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Loading","className","src","require","alt","MainDisplay","props","circleDetect","setState","detecting","srcMat","cv","imread","displayMat","clone","circlesMat","Mat","cvtColor","COLOR_RGBA2GRAY","HoughCircles","HOUGH_GRADIENT","i","cols","x","data32F","y","radius","center","Point","circle","imshow","delete","clearCanvas","image","onChangeHandler","event","URL","createObjectURL","target","files","document","getElementById","style","visibility","onLoadHandler","id","state","htmlFor","type","accept","onChange","this","Button","color","variant","component","disabled","onClick","onLoad","React","Component","App","onScriptLoad","cvLoaded","script","createElement","async","onload","body","appendChild","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6a08a348.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.bb533f76.gif\";","import React from 'react';\nimport {Button} from '@material-ui/core';\n\n/* global cv */\n\nexport const Loading = () => {\n  return (\n    <div className=\"loading\">\n      <img className=\"loadingImg\" src={require('../images/loading.gif')} alt=\"loading\"/>\n      <span>Loading resources</span>\n    </div>\n  )\n}\n\nexport class MainDisplay extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {image:null, detecting: false};\n  }\n\n  circleDetect = () => {\n    this.setState({detecting:true});\n    let srcMat = cv.imread('output');\n    let displayMat = srcMat.clone();\n    let circlesMat = new cv.Mat();  \n\n    cv.cvtColor(srcMat, srcMat, cv.COLOR_RGBA2GRAY);\n    cv.HoughCircles(srcMat, circlesMat, cv.HOUGH_GRADIENT, 1, 45, 75, 40, 0, 0);\n\n    for (let i = 0; i < circlesMat.cols; ++i) {\n      let x = circlesMat.data32F[i * 3];\n      let y = circlesMat.data32F[i * 3 + 1];\n      let radius = circlesMat.data32F[i * 3 + 2];\n      let center = new cv.Point(x, y);\n      cv.circle(displayMat, center, radius, [255, 0, 0, 255], 3);\n    }\n    cv.imshow('output', displayMat);\n\n    srcMat.delete();\n    displayMat.delete();\n    circlesMat.delete();\n  }\n\n  clearCanvas = () => {\n    let image = cv.imread('image');\n    cv.imshow('output', image);\n    this.setState({detecting:false});\n  }\n  \n  onChangeHandler = (event) => {\n    this.setState({image:URL.createObjectURL(event.target.files[0])})\n    document.getElementById(\"detect\").style.visibility=\"visible\";\n  }\n\n  onLoadHandler = (event) => {\n    let image = cv.imread(event.target.id);\n    cv.imshow('output', image);\n  }\n  \n  render(props) {\n    return (\n      <div>\n        <label className=\"upload\" htmlFor=\"uploadPhoto\">\n          <input id=\"uploadPhoto\" className=\"uploadPhoto\" type=\"file\" accept=\"image/*\" onChange={this.onChangeHandler}\n          />\n          <Button color=\"primary\" variant=\"contained\" component=\"span\">\n            Upload Image\n          </Button>\n        </label>\n\n        <div className=\"detect\" id=\"detect\">\n          <Button color=\"primary\" disabled={this.state.detecting} variant=\"contained\" onClick={this.circleDetect}>\n            Detect Circles\n          </Button>\n          <Button color=\"primary\" variant=\"contained\" onClick={this.clearCanvas}>\n            Clear\n          </Button>\n        </div>\n\n\n        <div className=\"images\">\n          {/* eslint-disable-next-line */}\n          <img className=\"image\" id=\"image\" src={this.state.image} onLoad={this.onLoadHandler}/>\n          {/* eslint-disable-next-line */}\n          <canvas className=\"output\" id=\"output\"/>\n        </div>\n      </div>\n    )\n  }\n} ","import React from 'react';\nimport './App.css';\nimport {Loading, MainDisplay} from '../Display';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {cvLoaded:false}\n  }\n\n  onScriptLoad = () => {\n    this.setState({cvLoaded:true});\n  }\n  \n  componentDidMount() {\n    this.script = document.createElement(\"script\");\n    this.script.src = 'https://docs.opencv.org/4.4.0/opencv.js';\n    this.script.async = true;\n    this.script.onload = () => this.onScriptLoad();\n    document.body.appendChild(this.script);\n  }\n  componentWillUnmount() {\n    this.setState({cvLoaded:false});\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        {this.state.cvLoaded ? <MainDisplay cvLoaded={this.state.cvLoaded}/>: <Loading/>}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}